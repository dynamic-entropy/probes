#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Eric Vaandering <ewv@fnal.gov>, 2020-2021

"""
Probe to check the backlog of updated dids.
"""
from __future__ import print_function

import sys
import traceback

from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from rucio.common.config import config_get
from rucio.core import monitor
from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from rucio.db.sqla.util import get_count

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

PROM_SERVERS = config_get('monitor', 'prometheus_servers', raise_exception=False, default='')
if PROM_SERVERS != '':
    PROM_SERVERS = PROM_SERVERS.split(',')

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        query = session.query(models.UpdatedDID)
        result = get_count(query)
        monitor.record_gauge('judge.updated_dids', value=result)
        Gauge('judge_updated_dids', '', registry=registry).set(result)

        if len(PROM_SERVERS):
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_updated_dids', registry=registry)
                except:
                    continue

        # created_at, count, max, min, avg, stdev = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
        # result = session.execute('select * from atlas_rucio.concurency_stats where created_at > sysdate - 1/1440')
        # for row in result:
        #   created_at, count, max, min, avg, stdev = row
        # monitor.record_gauge(stat='judge.updated_dids_per_min.count', value=count or 0)
        # monitor.record_gauge(stat='judge.updated_dids_per_min.max', value=max or 0)
        # monitor.record_gauge(stat='judge.updated_dids_per_min.min', value=min or 0)
        # monitor.record_gauge(stat='judge.updated_dids_per_min.avg', value=avg or 0)
        # monitor.record_gauge(stat='judge.updated_dids_per_min.stdev', value=stdev or 0)
        # print created_at, count, max, min, avg, stdev
    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)
